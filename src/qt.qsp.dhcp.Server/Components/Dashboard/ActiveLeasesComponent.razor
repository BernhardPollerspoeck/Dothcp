@using qt.qsp.dhcp.Server.Grains.DhcpManager
@using qt.qsp.dhcp.Server.Services

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="card-title mb-0">
            Active Leases
            @if (!string.IsNullOrEmpty(DhcpNetwork?.NetworkCidr))
            {
                <small class="text-muted">on @DhcpNetwork.NetworkCidr</small>
            }
            (@RecentLeases.Count)
        </h5>
        <button class="btn btn-sm btn-outline-primary" @onclick="RefreshLeases">
            <i class="bi bi-arrow-clockwise"></i> Refresh
        </button>
    </div>
    <div class="card-body">
        @if (RecentLeases.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>IP Address</th>
                            <th>MAC Address</th>
                            <th>Hostname</th>
                            <th>Status</th>
                            <th>Lease Start</th>
                            <th>Expires</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var lease in RecentLeases.Take(10))
                        {
                            <tr>
                                <td>
                                    <code>@lease.IpAddress</code>
                                </td>
                                <td>
                                    <code>@lease.MacAddress</code>
                                </td>
                                <td>@(lease.HostName ?? "-")</td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(lease.Status)">
                                        @lease.Status
                                    </span>
                                </td>
                                <td>@lease.LeaseStart.ToString("MM/dd HH:mm")</td>
                                <td>
                                    @if (lease.IsExpired())
                                    {
                                        <span class="text-danger">Expired</span>
                                    }
                                    else
                                    {
                                        <span>@lease.LeaseExpiration.ToString("MM/dd HH:mm")</span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button class="btn btn-outline-info btn-sm" @onclick="() => ViewLease(lease)">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button class="btn btn-outline-warning btn-sm" @onclick="() => RenewLease(lease)">
                                            <i class="bi bi-arrow-clockwise"></i>
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => RevokeLease(lease)">
                                            <i class="bi bi-x-circle"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @if (RecentLeases.Count > 10)
            {
                <div class="text-center mt-3">
                    <button class="btn btn-outline-primary" @onclick="ViewAllLeases">
                        View All @RecentLeases.Count Leases
                    </button>
                </div>
            }
        }
        else
        {
            <div class="text-center py-4 text-muted">
                <i class="bi bi-info-circle display-6"></i>
                <div class="mt-2">No active leases found</div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public List<DhcpLease> RecentLeases { get; set; } = [];
    [Parameter] public DhcpNetworkInfo? DhcpNetwork { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }

    private string GetStatusBadgeClass(LeaseStatus status)
    {
        return status switch
        {
            LeaseStatus.Active => "bg-success",
            LeaseStatus.Expired => "bg-danger",
            LeaseStatus.Renewed => "bg-info",
            _ => "bg-secondary"
        };
    }

    private async Task RefreshLeases()
    {
        await OnRefresh.InvokeAsync();
    }

    private void ViewLease(DhcpLease lease)
    {
        // Placeholder for lease detail view
        // In a real implementation, this would navigate to a detail page or show a modal
    }

    private void RenewLease(DhcpLease lease)
    {
        // Placeholder for lease renewal
        // In a real implementation, this would call the lease renewal service
    }

    private void RevokeLease(DhcpLease lease)
    {
        // Placeholder for lease revocation
        // In a real implementation, this would call the lease revocation service
    }

    private void ViewAllLeases()
    {
        // Placeholder for navigation to full lease list
        // In a real implementation, this would navigate to a leases page
    }
}