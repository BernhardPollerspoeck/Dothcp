@using qt.qsp.dhcp.Server.Services
@using System.Net.NetworkInformation

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">Server Status</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <strong>Uptime:</strong> @FormatUptime(ServerStatus.Uptime)
                </div>
                <div class="mb-3">
                    <strong>Status:</strong> 
                    <span class="badge @GetStatusBadgeClass(ServerStatus.State)">
                        @ServerStatus.State
                    </span>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <strong>Network Interfaces:</strong>
                    <ul class="list-unstyled mt-2">
                        @foreach (var nic in ServerStatus.NetworkInterfaces.Take(3))
                        {
                            <li class="mb-1">
                                <span class="badge @GetNicStatusBadgeClass(nic.Status) me-2">@nic.Status</span>
                                @nic.Name: @nic.IpAddress
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-12">
                <div class="btn-group" role="group">
                    <button class="btn btn-success btn-sm" @onclick="StartService" disabled="@(ServerStatus.State == ServerState.Running)">
                        Start
                    </button>
                    <button class="btn btn-warning btn-sm" @onclick="StopService" disabled="@(ServerStatus.State == ServerState.Stopped)">
                        Stop
                    </button>
                    <button class="btn btn-info btn-sm" @onclick="RestartService">
                        Restart
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public ServerStatus ServerStatus { get; set; } = new();

    private string FormatUptime(TimeSpan uptime)
    {
        if (uptime.TotalDays >= 1)
            return $"{(int)uptime.TotalDays}d {uptime.Hours}h {uptime.Minutes}m";
        if (uptime.TotalHours >= 1)
            return $"{uptime.Hours}h {uptime.Minutes}m";
        return $"{uptime.Minutes}m {uptime.Seconds}s";
    }

    private string GetStatusBadgeClass(ServerState state)
    {
        return state switch
        {
            ServerState.Running => "bg-success",
            ServerState.Stopped => "bg-secondary",
            ServerState.Error => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetNicStatusBadgeClass(OperationalStatus status)
    {
        return status switch
        {
            OperationalStatus.Up => "bg-success",
            OperationalStatus.Down => "bg-danger",
            OperationalStatus.Testing => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private void StartService()
    {
        // Placeholder for service start functionality
        // In a real implementation, this would call a service management API
    }

    private void StopService()
    {
        // Placeholder for service stop functionality
        // In a real implementation, this would call a service management API
    }

    private void RestartService()
    {
        // Placeholder for service restart functionality
        // In a real implementation, this would call a service management API
    }
}